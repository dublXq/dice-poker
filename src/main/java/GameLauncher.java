import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.util.*;

/**
 * @author Evgeniy_Tyslevich
 * @link <a href="https://github.com/dublXq">...</a>
 */
public class GameLauncher {
    private static final Scanner SCANNER = new Scanner(System.in);
    private static final GameLauncher GAME_LAUNCHER = new GameLauncher();
    private static final GameSystem GAME_SYSTEM = new GameSystem();
    private static boolean isNotTrue = false;
    private static final ArrayList<String> isPreviousSelectionTracker = new ArrayList<>();
    private static int botGeneratedValue;
    private static final ArrayList<Integer> usedDiceChoices = new ArrayList<>();
    private static final HashSet<Integer> INTEGER_HASH_SET = new HashSet<>();
    private static int TIME = 3;
    static String isDataInput;
    static final HashMap<String, Integer> hashMap = new HashMap<>();

    public static void main(String[] args) throws IOException, NoSuchFieldException, IllegalAccessException, InterruptedException {


        System.out.println("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥—Ä—É–≥! –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ò–≥—Ä–∞ –≤ –ü–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö o(Ôø£‚ñΩÔø£)ÔΩÑ");
        while (true) {
            System.out.print("–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã. \n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∞–∂–º–∏ —Ü–∏—Ñ—Ä—É 1\n–û—Ç–≤–µ—Ç: ");
            isDataInput = SCANNER.nextLine();
            if (isDataInput.equals("1")) {
                Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
                break;
            } else {
                System.out.println("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }

        System.out.print("–ú–æ–ª–æ–¥–µ—Ü! –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω. –ù—É —á—Ç–æ, –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å?\n1 - –î–∞\n2 - –ù–µ—Ç\n–û—Ç–≤–µ—Ç: ");
        isDataInput = SCANNER.nextLine();

        while (true) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            GameSystem.collectionAllVariablesNames();

            if (isDataInput.equals("1")) {
                System.out.println("–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–±–µ–¥–µ!");
                GAME_LAUNCHER.startTurnMethods();
                TIME--;
                break;
            } else if (isDataInput.equals("2")) {
                System.out.println("–£–¥–∞—á–∏! –†–∞–¥ –±—ã–ª —É–≤–∏–¥–µ—Ç—å—Å—è!(üëâÔæü„ÉÆÔæü)üëâ");
                return;
            } else {
                System.out.print("–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É = 1\n–û—Ç–≤–µ—Ç: ");
                isDataInput = SCANNER.nextLine();
            }
        }
        rollOrScore();
        startBotMove();
        while (true) {
            if (INTEGER_HASH_SET.size() == 6) {
                break;
            } else {
                PlayerCheck.wordBookWordsOfSupport();
                startPersonMove();
                System.out.println("------------------------------------");
                startBotMove();
            }
        }
        PlayerCheck.playerCalculateBonusPoints();
        System.out.println("------------------------------------");

        System.out.println("–ù—É —á—Ç–æ –∂, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã. –¢–≤–æ—è —Å—É–º–º–∞ –æ—á–∫–æ–≤, —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç --> "
                + GlobalVariables.playerSummaAllNumbers + " –æ—á–∫–æ–≤.\n" +
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ä–∞—É–Ω–¥—É!\n");
        Thread.sleep(300);
        System.out.println("""
                –ó–∞–º–µ—Ç—å, —á—Ç–æ –≤–æ –≤—Ç–æ—Ä–æ–º —Ä–∞—É–Ω–¥–µ, –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö –±—Ä–æ—Å–∫–æ–≤ ^_~
                –ü–æ—ç—Ç–æ–º—É –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è )
                """);
        for (int i = 5; i >= 0; i--) {
            Thread.sleep(1000);
            System.out.println("–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ " + i + " —Å–µ–∫—É–Ω–¥\n");
        }
        System.out.println("----------- START -----------");
        while (true) {
            if (INTEGER_HASH_SET.size() == 13) {
                break;
            } else {
                PlayerCheck.wordBookWordsOfSupport();
                startPersonMove();
                System.out.println("------------------------------------");
                startBotMove();
            }
        }

        if (GameSystem.summaOfAllNumbersPerson >= GameSystem.summaOfAllNumbersBot) {
            System.out.println("\n–¢—ã –ø–æ–±–µ–¥–∏–ª! ( Ôæâ ÔæüÔΩ∞Ôæü)Ôæâ\n–¢–≤–æ—è —Å—É–º–º–∞ –æ—á–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç --> " + GameSystem.summaOfAllNumbersPerson +
                    "\n–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π —Å—ã–≥—Ä–∞—Ç—å, —É–≤–∏–¥–∏–º—Å—è ^_~\nP.S. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É!");
        } else {
            System.out.println("\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! ‚ïÆÔºà‚ïØÔºø‚ï∞Ôºâ‚ï≠\n–¢–≤–æ—è —Å—É–º–º–∞ –æ—á–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç --> " + GameSystem.summaOfAllNumbersPerson +
                    "\n–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π —Å—ã–≥—Ä–∞—Ç—å, —É–≤–∏–¥–∏–º—Å—è ^_~\nP.S. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É!");
        }
    }

    private static void startPersonMove() throws NoSuchFieldException, IllegalAccessException, IOException {
        resetVariables();
        GAME_LAUNCHER.startTurnMethods();
        rollOrScore();
    }
    private static void startBotMove() throws NoSuchFieldException, IllegalAccessException {
        if (isNotTrue) {
            GameSystem.clearAllGlobalVariables();
            smartSummationMethodBot();
            PlayerBot.playerBotCalculateBonusPoints();
            System.out.println("\n–ë–æ—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥! –í–∞—à —á–µ—Ä–µ–¥ ^_~");
            isNotTrue = false;
        }
    }
    private static void resetVariables() throws NoSuchFieldException, IllegalAccessException {
        GameSystem.clearAllGlobalVariables();
        GAME_SYSTEM.arrayCubesRandom.clear();
        GameSystem.scoreTimeArrayList.clear();
    }
    private static void rollOrScore() throws IOException, NoSuchFieldException, IllegalAccessException {
        while (true) {
            System.out.print("1 - –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏\n2 - –ó–∞—Å—á–∏—Ç–∞—Ç—å\n–û—Ç–≤–µ—Ç: ");
            isDataInput = SCANNER.nextLine();
            if (isDataInput.equals("1")) {
                if (TIME == 0) {
                    System.out.println("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –±—Ä–æ—Å–æ–∫. –í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?");
                    TIME = 3;
                    GAME_LAUNCHER.methodResultScare();
                    break;
                } else {
                    resetVariables();
                    GAME_LAUNCHER.startTurnMethods();
                    TIME--;
                }
            } else if (isDataInput.equals("2")) {
                // –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ (–º–µ—Ç–æ–¥)
                TIME = 3;
                GAME_LAUNCHER.methodResultScare();
                break;
            } else {
                System.out.println("–î–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }
    }
    public void startTurnMethods() throws NoSuchFieldException, IllegalAccessException {
        GameSystem.clearAllGlobalVariables();
        GAME_SYSTEM.throwRandomCube();
        GAME_SYSTEM.playersPersonScore();
        GAME_SYSTEM.createAndUpdateArea();
    }
    public void methodResultScare() throws IOException, NoSuchFieldException, IllegalAccessException {
        // –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
        do {
            System.out.print("""
                    –ö—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?
                    –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –∑–∞–±—ã–ª, —á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–∫—Ü–∏—è, –∏ —á–µ–º –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–µ—Ç—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã
                    0 - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
                    1 - –í–µ—Ä—Ö–Ω—è—è —Å–µ–∫—Ü–∏—è
                    2 - –ù–∏–∂–Ω—è—è —Å–µ–∫—Ü–∏—è
                    –û—Ç–≤–µ—Ç:\s""");
            isDataInput = SCANNER.nextLine();
            while (true) {
                if (isDataInput.isEmpty()) {
                    System.out.print("–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 2, –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É–¥–∞ —Ö–æ—á–µ—à—å –∑–∞—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏\n–û—Ç–≤–µ—Ç: ");
                    isDataInput = SCANNER.nextLine();

                } else if (!Character.isDigit(isDataInput.charAt(0))) {
                    System.out.print("–¢—ã –≤–≤–µ–ª –Ω–µ —Ü–∏—Ñ—Ä—É! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–û—Ç–≤–µ—Ç: ");
                    isDataInput = SCANNER.nextLine();

                } else {
                    int viewNumber = Integer.parseInt(isDataInput);
                    if (viewNumber < 0 || viewNumber > 2) {
                        System.out.print("–í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã! –¢—ã –≤–≤–µ–ª -> " + viewNumber + ". –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç 0 –¥–æ 2\n–û—Ç–≤–µ—Ç: ");
                        isDataInput = SCANNER.nextLine();
                    }
                    break;
                }
            }

            if (isDataInput.equals("0")) {
                Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
            } else {
                switch (isDataInput) {
                    case "1" -> startFirstHalf();
                    case "2" -> startSecondHalf();
                    default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
                }
                isNotTrue = true;
                break;
            }
        } while (true);
    }
    public void startFirstHalf() throws NoSuchFieldException, IllegalAccessException {
        String numb = getPlayerUpperSectionSelection();
        resetVariableValue(numb);
        smartFirstSummationMethod(numb);
    }
    public void startSecondHalf() throws NoSuchFieldException, IllegalAccessException {
        String numb = getPlayerLowerSectionSelection();
        resetVariableValue(numb);
        smartSecondSummationMethod(numb, hashMap);
    }
    private static String getPlayerUpperSectionSelection() {
        System.out.print("1 - –ï–¥–∏–Ω–∏—Ü—ã\n2 - –î–≤–æ–π–∫–∏\n3 - –¢—Ä–æ–π–∫–∏\n4 - –ß–µ—Ç–≤–µ—Ä–∫–∏\n5 - –ü—è—Ç–µ—Ä–∫–∏\n6 - –®–µ—Å—Ç–µ—Ä–∫–∏\n–û—Ç–≤–µ—Ç: ");
        isDataInput = SCANNER.nextLine();

        while (true) {
            if (isDataInput.isEmpty()) {
                System.out.print("–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 6, –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É–¥–∞ —Ö–æ—á–µ—à—å –∑–∞—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏\n–û—Ç–≤–µ—Ç: ");
                isDataInput = SCANNER.nextLine();
            } else if (!Character.isDigit(isDataInput.charAt(0))) {
                System.out.print("–¢—ã –≤–≤–µ–ª –Ω–µ —Ü–∏—Ñ—Ä—É! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–û—Ç–≤–µ—Ç: ");
                isDataInput = SCANNER.nextLine();
            } else {
                int viewNumber = Integer.parseInt(isDataInput);
                if (viewNumber < 1 || viewNumber > 6) {
                    System.out.print("–í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã! –¢—ã –≤–≤–µ–ª -> " + viewNumber + ". –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç 1 –¥–æ 6\n–û—Ç–≤–µ—Ç: ");
                    isDataInput = SCANNER.nextLine();
                } else if (isPreviousSelectionTracker.contains(isDataInput)) {
                    System.out.print("–¢—ã —É–∂–µ —ç—Ç–æ –≤–≤–æ–¥–∏–ª, –∑–∞–±—ã–ª?. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ 6, –∫—É–¥–∞ –∂–µ–ª–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ\n–û—Ç–≤–µ—Ç: ");
                    isDataInput = SCANNER.nextLine();
                } else {
                    isPreviousSelectionTracker.add(isDataInput);
                    break;
                }
            }
        }
        switch (isDataInput) {
            case "1" -> isDataInput = "playerNumberOfUnits";
            case "2" -> isDataInput = "playerNumberOfDeuces";
            case "3" -> isDataInput = "playerNumberOfTriplets";
            case "4" -> isDataInput = "playerNumberOfFours";
            case "5" -> isDataInput = "playerNumberOfFives";
            case "6" -> isDataInput = "playerNumberOfSixes";

            default -> System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");

        }
        return isDataInput;
    }
    private static void resetVariableValue(String numb) throws IllegalAccessException, NoSuchFieldException {
        for (String variableName : GameSystem.variableNames) {
            if (variableName.contains(numb)) {
                GlobalVariables.class.getField(variableName).set(null, 0);
            }
        }
    }
    public static void randomChooseBot(HashMap<String, Integer> hashMap) throws NoSuchFieldException, IllegalAccessException {
        botGeneratedValue = 0;
        Random random = new Random();
        ArrayList<Integer> integerArrayList = new ArrayList<>();
        setHashMap();
        while (INTEGER_HASH_SET.containsAll(integerArrayList)) {
            resetVariables();
            System.out.println("–ë–æ—Ç –¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫ ^_^");
            GAME_SYSTEM.throwRandomCube();
            if (!usedDiceChoices.contains(1)) {
                if (GAME_SYSTEM.arrayCubesRandom.contains(GAME_SYSTEM.diceOne)) {
                    integerArrayList.add(1);
                }
            }
            if (!usedDiceChoices.contains(2)) {
                if (GAME_SYSTEM.arrayCubesRandom.contains(GAME_SYSTEM.diceTwo)) {
                    integerArrayList.add(2);
                }
            }
            if (!usedDiceChoices.contains(3)) {
                if (GAME_SYSTEM.arrayCubesRandom.contains(GAME_SYSTEM.diceThree)) {
                    integerArrayList.add(3);
                }
            }
            if (!usedDiceChoices.contains(4)) {
                if (GAME_SYSTEM.arrayCubesRandom.contains(GAME_SYSTEM.diceFour)) {
                    integerArrayList.add(4);
                }
            }
            if (!usedDiceChoices.contains(5)) {
                if (GAME_SYSTEM.arrayCubesRandom.contains(GAME_SYSTEM.diceFive)) {
                    integerArrayList.add(5);
                }
            }
            if (!usedDiceChoices.contains(6)) {
                if (GAME_SYSTEM.arrayCubesRandom.contains(GAME_SYSTEM.diceSix)) {
                    integerArrayList.add(6);
                }
            }
            if (!usedDiceChoices.contains(7)) {
                if (PlayerCheck.playerCheckTripleDice(GAME_SYSTEM.arrayCubesRandom)) {
                    integerArrayList.add(7);
                }
            }
            if (!usedDiceChoices.contains(8)) {
                if (PlayerCheck.playerCheckQuadrupleDice(GAME_SYSTEM.arrayCubesRandom)) {
                    integerArrayList.add(8);
                }
            }
            if (!usedDiceChoices.contains(9)) {
                if (PlayerCheck.playerCheckFullHouse(GAME_SYSTEM.arrayCubesRandom)) {
                    integerArrayList.add(9);
                }
            }
            if (!usedDiceChoices.contains(10)) {
                if (PlayerCheck.playerCheckLittleStreet(hashMap, GAME_SYSTEM.arrayCubesRandom)) {
                    integerArrayList.add(10);
                }
            }
            if (!usedDiceChoices.contains(11)) {
                if (PlayerCheck.playerCheckBigStreet(hashMap, GAME_SYSTEM.arrayCubesRandom)) {
                    integerArrayList.add(11);
                }
            }
            if (!usedDiceChoices.contains(12)) {
                integerArrayList.add(12);
            }
            if (!usedDiceChoices.contains(13)) {
                if (PlayerCheck.playerCheckYahtzee(GAME_SYSTEM.arrayCubesRandom)) {
                    integerArrayList.add(13);
                }
            }
        }
        int index = random.nextInt(integerArrayList.size());
        botGeneratedValue = integerArrayList.get(index);
        usedDiceChoices.add(botGeneratedValue);
        INTEGER_HASH_SET.add(botGeneratedValue);
        integerArrayList.clear();
    }
    private static void smartSummationMethodBot() throws NoSuchFieldException, IllegalAccessException {
        int stream;
        randomChooseBot(hashMap);
        switch (botGeneratedValue) {
            case 1 -> {
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceOne::equals).count();
                GlobalVariables.botNumberOfUnits = stream;
                GAME_SYSTEM.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfUnits");
            }
            case 2 -> {
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceTwo::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_TWO;
                GlobalVariables.botNumberOfDeuces = stream;
                GAME_SYSTEM.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfDeuces");
            }
            case 3 -> {
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceThree::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_THREE;
                GlobalVariables.botNumberOfTriplets = stream;
                GAME_SYSTEM.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfTriplets");
            }
            case 4 -> {
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceFour::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_FOUR;
                GlobalVariables.botNumberOfFours = stream;
                GAME_SYSTEM.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfFours");
            }
            case 5 -> {
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceFive::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_FIVE;
                GlobalVariables.botNumberOfFives = stream;
                GAME_SYSTEM.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfFives");
            }
            case 6 -> {
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceSix::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_SIX;
                GlobalVariables.botNumberOfSixes = stream;
                GAME_SYSTEM.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfSixes");
            }
            case 7 -> {
                if (PlayerCheck.playerCheckTripleDice(GAME_SYSTEM.arrayCubesRandom)) {
                    stream = hashMap.get(GlobalVariables.numberDiceForVariable);
                    GlobalVariables.botThreeOfAKindPoints = stream * 3;
                    GAME_SYSTEM.createAndUpdateArea();
                    GameSystem.variableNames.remove("botThreeOfAKindPoints");
                } else {
                    GlobalVariables.botThreeOfAKindPoints = 0;
                    GameSystem.variableNames.remove("botThreeOfAKindPoints");
                }
            }
            case 8 -> {
                if (PlayerCheck.playerCheckQuadrupleDice(GAME_SYSTEM.arrayCubesRandom)) {
                    stream = hashMap.get(GlobalVariables.numberDiceForVariable);
                    GlobalVariables.botFourOfAKindPoints = stream * 4;
                    GAME_SYSTEM.createAndUpdateArea();
                    GameSystem.variableNames.remove("botFourOfAKindPoints");
                } else {
                    GlobalVariables.botFourOfAKindPoints = 0;
                    GameSystem.variableNames.remove("botFourOfAKindPoints");
                }
            }
            case 9 -> {
                if (PlayerCheck.playerCheckFullHouse(GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.botFullHousePoints = 25;
                    GAME_SYSTEM.createAndUpdateArea();
                    GameSystem.variableNames.remove("botFullHousePoints");
                } else {
                    GlobalVariables.botFullHousePoints = 0;
                    GameSystem.variableNames.remove("botFullHousePoints");
                }
            }
            case 10 -> {
                if (PlayerCheck.playerCheckLittleStreet(hashMap, GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.botSmallStraightPoints = 30;
                    GAME_SYSTEM.createAndUpdateArea();
                    GameSystem.variableNames.remove("botSmallStraightPoints");
                } else {
                    GlobalVariables.botSmallStraightPoints = 0;
                    GameSystem.variableNames.remove("botSmallStraightPoints");
                }
            }
            case 11 -> {
                if (PlayerCheck.playerCheckBigStreet(hashMap, GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.botLargeStraightPoints = 40;
                    GAME_SYSTEM.createAndUpdateArea();
                    GameSystem.variableNames.remove("botLargeStraightPoints");
                } else {
                    GlobalVariables.botLargeStraightPoints = 0;
                    GameSystem.variableNames.remove("botLargeStraightPoints");
                }
            }
            case 12 -> {
                GlobalVariables.botChancePoints = GlobalVariables.botSummaAllNumbers;
                GAME_SYSTEM.createAndUpdateArea();
                GameSystem.variableNames.remove("botChancePoints");
            }
            case 13 -> {
                if (PlayerCheck.playerCheckYahtzee(GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.botYahtzeePoints = 50;
                    GAME_SYSTEM.createAndUpdateArea();
                    GameSystem.variableNames.remove("botYahtzeePoints");
                } else {
                    GlobalVariables.botYahtzeePoints = 0;
                    GameSystem.variableNames.remove("botYahtzeePoints");
                }
            }
        }
    }
    public static void smartFirstSummationMethod(String numb) {

        int stream;
        switch (numb) {
            case "playerNumberOfUnits" -> {
                // –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –µ–¥–∏–Ω–∏—Ü—ã -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfUnits
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceOne::equals).count();
                GlobalVariables.playerNumberOfUnits = stream;
                GameSystem.variableNames.remove("playerNumberOfUnits");
            }
            case "playerNumberOfDeuces" -> {
                // –µ—Å–ª–∏ –¥–≤–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¥–≤–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfDeuces
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceTwo::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_TWO;
                GlobalVariables.playerNumberOfDeuces = stream;
                GameSystem.variableNames.remove("playerNumberOfDeuces");
            }
            case "playerNumberOfTriplets" -> {
                // –µ—Å–ª–∏ —Ç—Ä–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —Ç—Ä–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfTriplets
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceThree::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_THREE;
                GlobalVariables.playerNumberOfTriplets = stream;
                GameSystem.variableNames.remove("playerNumberOfTriplets");
            }
            case "playerNumberOfFours" -> {
//                 –µ—Å–ª–∏ —á–µ—Ç–≤–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —á–µ—Ç–≤–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFours
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceFour::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_FOUR;
                GlobalVariables.playerNumberOfFours = stream;
                GameSystem.variableNames.remove("playerNumberOfFours");
            }
            case "playerNumberOfFives" -> {
//                 –µ—Å–ª–∏ –ø—è—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ø—è—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFives
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceFive::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_FIVE;
                GlobalVariables.playerNumberOfFives = stream;
                GameSystem.variableNames.remove("playerNumberOfFives");
            }
            case "playerNumberOfSixes" -> {
//                 –µ—Å–ª–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —à–µ—Å—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfSixes
                stream = (int) GAME_SYSTEM.arrayCubesRandom.stream().filter(GAME_SYSTEM.diceSix::equals).count();
                stream = stream * GAME_SYSTEM.CUBE_SIX;
                GlobalVariables.playerNumberOfSixes = stream;
                GameSystem.variableNames.remove("playerNumberOfSixes");
            }
            default -> System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");
        }
    }
    public static void smartSecondSummationMethod(String numb, HashMap<String, Integer> hashMap) {
        int count;
        setHashMap();
        switch (numb) {
            // –µ—Å–ª–∏ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerThreeOfAKindPoints
            case "playerThreeOfAKindPoints" -> {
                if (PlayerCheck.playerCheckTripleDice(GAME_SYSTEM.arrayCubesRandom)) {
                    count = hashMap.get(GlobalVariables.numberDiceForVariable);
                    GlobalVariables.playerThreeOfAKindPoints = count * 3;
                    GameSystem.variableNames.remove("playerThreeOfAKindPoints");
                } else {
                    GameSystem.variableNames.remove("playerThreeOfAKindPoints");
                    System.out.println("–≠–π, –Ω–µ —à–∞–ª–∏.");
                }
            }
            // –µ—Å–ª–∏ –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerFourOfAKindPoints
            case "playerFourOfAKindPoints" -> {
                if (PlayerCheck.playerCheckQuadrupleDice(GAME_SYSTEM.arrayCubesRandom)) {
                    count = hashMap.get(GlobalVariables.numberDiceForVariable);
                    GlobalVariables.playerFourOfAKindPoints = count * 4;
                    GameSystem.variableNames.remove("playerFourOfAKindPoints");
                } else {
                    GameSystem.variableNames.remove("playerFourOfAKindPoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –§—É–ª–ª-—Ö–∞—É—Å -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º "–§—É–ª–ª-—Ö–∞—É—Å" -> —Å—É–º–º–∞ -> GlobalVariables.playerFullHousePoints
            case "playerFullHousePoints" -> {
                if (PlayerCheck.playerCheckFullHouse(GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.playerFullHousePoints = 25;
                    GameSystem.variableNames.remove("playerFullHousePoints");
                } else {
                    GameSystem.variableNames.remove("playerFullHousePoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerSmallStraightPoints
            case "playerSmallStraightPoints" -> {
                if (PlayerCheck.playerCheckLittleStreet(hashMap, GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.playerSmallStraightPoints = 30;
                    GameSystem.variableNames.remove("playerSmallStraightPoints");
                } else {
                    GameSystem.variableNames.remove("playerSmallStraightPoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerLargeStraightPoints
            case "playerLargeStraightPoints" -> {
                if (PlayerCheck.playerCheckBigStreet(hashMap, GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.playerLargeStraightPoints = 40;
                    GameSystem.variableNames.remove("playerLargeStraightPoints");
                } else {
                    GameSystem.variableNames.remove("playerLargeStraightPoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –®–∞–Ω—Å -> —Å—É–º–º–∞ -> GlobalVariables.playerChancePoints
            case "playerChancePoints" -> {
                GlobalVariables.playerChancePoints = GlobalVariables.playerSummaAllNumbers;
                GameSystem.variableNames.remove("playerChancePoints");
            }
            // –µ—Å–ª–∏ Yahtzee -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º Yahtzee -> —Å—É–º–º–∞ -> GlobalVariables.playerYahtzeePoints
            case "playerYahtzeePoints" -> {
                if (PlayerCheck.playerCheckYahtzee(GAME_SYSTEM.arrayCubesRandom)) {
                    GlobalVariables.playerYahtzeePoints = 50;
                    GameSystem.variableNames.remove("playerCheckYahtzee");
                }
            }
            default -> System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑");
        }
    }
    public static String getPlayerLowerSectionSelection() {
        System.out.print("7 - –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n8 - –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n9 - –§—É–ª–ª-—Ö–∞—É—Å\n10 - –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç\n11 - –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç\n12 - –®–∞–Ω—Å\n13 - Yahtzee\n–û—Ç–≤–µ—Ç: ");
        isDataInput = SCANNER.nextLine();
        checkOnCorrectInput();
        switch (isDataInput) {
            case "7" -> isDataInput = "playerThreeOfAKindPoints";
            case "8" -> isDataInput = "playerFourOfAKindPoints";
            case "9" -> isDataInput = "playerFullHousePoints";
            case "10" -> isDataInput = "playerSmallStraightPoints";
            case "11" -> isDataInput = "playerLargeStraightPoints";
            case "12" -> isDataInput = "playerChancePoints";
            case "13" -> isDataInput = "playerYahtzeePoints";

            default -> System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");
        }
        return isDataInput;
    }
    private static void checkOnCorrectInput() {
        while (true) {
            if (isDataInput.isEmpty()) {
                System.out.print("–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 7 –¥–æ 13, –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É–¥–∞ —Ö–æ—á–µ—à—å –∑–∞—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏\n–û—Ç–≤–µ—Ç: ");
                isDataInput = SCANNER.nextLine();
            } else if (!Character.isDigit(isDataInput.charAt(0))) {
                System.out.print("–¢—ã –≤–≤–µ–ª –Ω–µ —Ü–∏—Ñ—Ä—É! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–û—Ç–≤–µ—Ç: ");
                isDataInput = SCANNER.nextLine();
            } else {
                int viewNumber = Integer.parseInt(isDataInput);
                if (viewNumber < 7 || viewNumber > 13) {
                    System.out.print("–í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã! –¢—ã –≤–≤–µ–ª -> " + viewNumber + ". –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç 7 –¥–æ 13\n–û—Ç–≤–µ—Ç: ");
                    isDataInput = SCANNER.nextLine();
                } else if (isPreviousSelectionTracker.contains(isDataInput)) {
                    System.out.print("–¢—ã —É–∂–µ —ç—Ç–æ –≤–≤–æ–¥–∏–ª, –∑–∞–±—ã–ª?. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–í—ã–±–µ—Ä–∏ –æ—Ç 7 –¥–æ 13, –∫—É–¥–∞ –∂–µ–ª–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ\n–û—Ç–≤–µ—Ç: ");
                    isDataInput = SCANNER.nextLine();
                } else {
                    isPreviousSelectionTracker.add(isDataInput);
                    break;
                }
            }
        }
    }
    public static void setHashMap() {
        hashMap.put(GAME_SYSTEM.diceOne, 1);
        hashMap.put(GAME_SYSTEM.diceTwo, 2);
        hashMap.put(GAME_SYSTEM.diceThree, 3);
        hashMap.put(GAME_SYSTEM.diceFour, 4);
        hashMap.put(GAME_SYSTEM.diceFive, 5);
        hashMap.put(GAME_SYSTEM.diceSix, 6);
    }
}
