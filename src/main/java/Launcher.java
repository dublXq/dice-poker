import java.awt.*;
import java.awt.image.RasterOp;
import java.io.IOException;
import java.net.URI;
import java.util.Scanner;

/**
 * @author Evgeniy_Tyslevich
 * @link <a href="https://github.com/dublXq">...</a>
 */
public class Launcher {
    static Scanner scanner = new Scanner(System.in);
    static Launcher launcher = new Launcher();
    static GameSystem gameSystem = new GameSystem();

    public static void main(String[] args) throws IOException, NoSuchFieldException, IllegalAccessException {
        boolean isFalse = false;
        int time = 3;

        System.out.println("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥—Ä—É–≥! –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ò–≥—Ä–∞ –≤ –ü–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö o(Ôø£‚ñΩÔø£)ÔΩÑ");
        while (true) {
            System.out.print("–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã. \n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∞–∂–º–∏ —Ü–∏—Ñ—Ä—É 1\n–û—Ç–≤–µ—Ç: ");
            String numb = scanner.nextLine();
            if (numb.equals("1")) {
//               Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
                break;
            } else {
                System.out.println("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }
        System.out.print("–ú–æ–ª–æ–¥–µ—Ü! –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω. –ù—É —á—Ç–æ, –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å?\n1 - –î–∞\n2 - –ù–µ—Ç\n–û—Ç–≤–µ—Ç: ");
        int numb_2 = scanner.nextInt();
        do {
            while (true) {
                if (numb_2 == 1) {
                    System.out.println("–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–±–µ–¥–µ!");
                    launcher.start();
                    break;
                } else if (numb_2 == 2) {
                    System.out.println("–£–¥–∞—á–∏! –†–∞–¥ –±—ã–ª —É–≤–∏–¥–µ—Ç—å—Å—è!(üëâÔæü„ÉÆÔæü)üëâ");
                    return;
                } else {
                    System.out.println("–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É = 1\n–û—Ç–≤–µ—Ç: ");
                }
            }

            System.out.print("1 - –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏\n2 - –ó–∞—Å—á–∏—Ç–∞—Ç—å\n–û—Ç–≤–µ—Ç: ");
            int numb_3 = scanner.nextInt();

            if (numb_3 == 1) {

                GameSystem.arrayCubesRandom.clear();
                GameSystem.arrayList.clear();
                GameSystem.clearAllGlobalVariables();
                time--;
                if (time <= 0) {
                    System.out.println("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –±—Ä–æ—Å–æ–∫. –í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?");
                    // –ö–æ–¥ (–º–µ—Ç–æ–¥)
                    launcher.methodResultScare();
                    break;
                }
            } else if (numb_3 == 2) {
                // –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ (–º–µ—Ç–æ–¥)
                launcher.methodResultScare();
                isFalse = true;
                break;

            } else {
                System.out.println("–î–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }


            if (isFalse) {
                gameSystem.playersBotScore();
                System.out.println("\n–ë–æ—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥! –í–∞—à —á–µ—Ä–µ–¥ ^_~");
                isFalse = false;
            }
        } while (true);
    }


    public void start() {
        gameSystem.throwRandomCube();
        gameSystem.playersPersonScore();
        gameSystem.createAndUpdateArea();
    }

    public void methodResultScare() throws IOException {
        // method –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
        System.out.print("–ö—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?\n–í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –∑–∞–±—ã–ª, —á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–∫—Ü–∏—è, –∏ —á–µ–º –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–µ—Ç—É–µ—Ç" +
                " –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã\n0 - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n1 - –í–µ—Ä—Ö–Ω—è—è —Å–µ–∫—Ü–∏—è\n2 - –ù–∏–∂–Ω—è—è —Å–µ–∫—Ü–∏—è\n–û—Ç–≤–µ—Ç: ");
        int numb = scanner.nextInt();
        switch (numb) {
            case 0:
                Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
            case 1:
                startingMethodNumbers();
            case 2:
                differentMethodNGames();
            default:
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
        }
    }

    public void startingMethodNumbers() {
        System.out.print("1 - –ï–¥–∏–Ω–∏—Ü—ã\n2 - –î–≤–æ–π–∫–∏\n3 - –¢—Ä–æ–π–∫–∏\n4 - –ß–µ—Ç–≤–µ—Ä–∫–∏\n5 - –ü—è—Ç–µ—Ä–∫–∏\n6 - –®–µ—Å—Ç–µ—Ä–∫–∏\n–û—Ç–≤–µ—Ç: ");
        int numb = scanner.nextInt();
        switch (numb) {
            case 1:
                // –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –µ–¥–∏–Ω–∏—Ü—ã -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfUnits
                break;
            case 2:
                // –µ—Å–ª–∏ –¥–≤–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¥–≤–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfDeuces
                break;
            case 3:
                // –µ—Å–ª–∏ —Ç—Ä–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —Ç—Ä–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfTriplets
                break;
            case 4:
                // –µ—Å–ª–∏ —á–µ—Ç–≤–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —á–µ—Ç–≤–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFours
                break;
            case 5:
                // –µ—Å–ª–∏ –ø—è—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ø—è—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFives
                break;
            case 6:
                // –µ—Å–ª–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —à–µ—Å—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfSixes
                break;
            default:
                System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑");
        }
    }

    public void differentMethodNGames() {
        System.out.print("1 - –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n2 - –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n3 - –§—É–ª–ª-—Ö–∞—É—Å\n4 - –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç\n5 - –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç\n6 - –®–∞–Ω—Å\n7 - Yahtzee\n–û—Ç–≤–µ—Ç: ");
        int numb = scanner.nextInt();
        switch (numb) {
            case 1:
                // –µ—Å–ª–∏ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerThreeOfAKindPoints
                break;
            case 2:
                // –µ—Å–ª–∏ –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerFourOfAKindPoints
                break;
            case 3:
                // –µ—Å–ª–∏ –§—É–ª–ª-—Ö–∞—É—Å -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º "–§—É–ª–ª-—Ö–∞—É—Å" -> —Å—É–º–º–∞ -> GlobalVariables.playerFullHousePoints
                break;
            case 4:
                // –µ—Å–ª–∏ –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerSmallStraightPoints
                break;
            case 5:
                // –µ—Å–ª–∏ –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerLargeStraightPoints
                break;
            case 6:
                // –µ—Å–ª–∏ –®–∞–Ω—Å -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –®–∞–Ω—Å -> —Å—É–º–º–∞ -> GlobalVariables.playerChancePoints
                break;
            case 7:
                // –µ—Å–ª–∏ Yahtzee -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º Yahtzee -> —Å—É–º–º–∞ -> GlobalVariables.playerYahtzeePoints
                break;
            default:
                System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑");
        }
    }
}
