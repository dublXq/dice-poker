import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.util.*;

/**
 * @author Evgeniy_Tyslevich
 * @link <a href="https://github.com/dublXq">...</a>
 */
public class Launcher {
    static final Scanner scanner = new Scanner(System.in);
    static final Launcher launcher = new Launcher();
    static final GameSystem gameSystem = new GameSystem();
    static boolean isFalse = false;
    static ArrayList<String> stringArrayList = new ArrayList<>();
    static Random random = new Random();
    private static int number;
    static ArrayList<Integer> arrayCubesRandoms = new ArrayList<>();
    static HashSet<Integer> hashSet = new HashSet<>();


    public static void main(String[] args) throws IOException, NoSuchFieldException, IllegalAccessException, InterruptedException {

        int time = 3;

        System.out.println("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥—Ä—É–≥! –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ò–≥—Ä–∞ –≤ –ü–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö o(Ôø£‚ñΩÔø£)ÔΩÑ");
        while (true) {
            System.out.print("–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã. \n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∞–∂–º–∏ —Ü–∏—Ñ—Ä—É 1\n–û—Ç–≤–µ—Ç: ");
            String numb = scanner.nextLine();
            if (numb.equals("1")) {
//                Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
                break;
            } else {
                System.out.println("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }

        System.out.print("–ú–æ–ª–æ–¥–µ—Ü! –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω. –ù—É —á—Ç–æ, –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å?\n1 - –î–∞\n2 - –ù–µ—Ç\n–û—Ç–≤–µ—Ç: ");
        String numb_2 = scanner.nextLine();

        while (true) {

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            GameSystem.collectionAllVariablesNames();

            if (numb_2.equals("1")) {
                System.out.println("–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–±–µ–¥–µ!");
                launcher.start();
                time--;
                break;
            } else if (numb_2.equals("2")) {
                System.out.println("–£–¥–∞—á–∏! –†–∞–¥ –±—ã–ª —É–≤–∏–¥–µ—Ç—å—Å—è!(üëâÔæü„ÉÆÔæü)üëâ");
                return;
            } else {
                System.out.print("–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É = 1\n–û—Ç–≤–µ—Ç: ");
                numb_2 = scanner.nextLine();
            }
        }
        RollOrScore(time);
        startWalkBot();

        while (true) {
            if (hashSet.size() == 6) {
                break;
            } else {
                PlayerPerson.wordBookWordsOfSupport();
                startWalkPerson(time);
                System.out.println("------------------------------------");
                startWalkBot();
            }
        }
        PlayerPerson.playerCalculateBonusPoints();
        System.out.println("------------------------------------");

        System.out.println("–ù—É —á—Ç–æ –∂, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã. –¢–≤–æ—è —Å—É–º–º–∞ –æ—á–∫–æ–≤, —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç --> "
                + GlobalVariables.playerSummaAllNumbers + " –æ—á–∫–æ–≤.\n" +
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ä–∞—É–Ω–¥—É!");
        for (int i = 10; i >= 0; i--) {
            Thread.sleep(1000);
            System.out.println("–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ " + i + " —Å–µ–∫—É–Ω–¥");
        }
        System.out.println("----------- START -----------");


    }

    private static void startWalkPerson(int time) throws NoSuchFieldException, IllegalAccessException, IOException {
        allClear();
        launcher.start();
        RollOrScore(time);
    }

    private static void startWalkBot() throws NoSuchFieldException, IllegalAccessException {
        if (isFalse) {
            GameSystem.clearAllGlobalVariables();
            smartSimplificationMethodForBot();
            System.out.println("\n–ë–æ—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥! –í–∞—à —á–µ—Ä–µ–¥ ^_~");
            isFalse = false;
        }
    }

    private static void allClear() throws NoSuchFieldException, IllegalAccessException {
        GameSystem.clearAllGlobalVariables();
        gameSystem.arrayCubesRandom.clear();
        GameSystem.arrayList.clear();
    }

    private static void RollOrScore(int time) throws IOException, NoSuchFieldException, IllegalAccessException {

        while (true) {
            System.out.print("1 - –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏\n2 - –ó–∞—Å—á–∏—Ç–∞—Ç—å\n–û—Ç–≤–µ—Ç: ");
            String numb = scanner.nextLine();
            if (numb.equals("1")) {
                if (time == 0) {
                    System.out.println("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –±—Ä–æ—Å–æ–∫. –í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?");
                    // –ö–æ–¥ (–º–µ—Ç–æ–¥)
                    time = 3;
                    launcher.methodResultScare();
                    break;

                } else {
                    allClear();
                    launcher.start();
                    time--;
                }

            } else if (numb.equals("2")) {
                // –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ (–º–µ—Ç–æ–¥)
                time = 3;
                launcher.methodResultScare();
                break;

            } else {
                System.out.println("–î–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }
    }


    public void start() throws NoSuchFieldException, IllegalAccessException {
        GameSystem.clearAllGlobalVariables();
        gameSystem.throwRandomCube();
        gameSystem.playersPersonScore();

        gameSystem.createAndUpdateArea();
    }

    public void methodResultScare() throws IOException, NoSuchFieldException, IllegalAccessException {
        // method –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
        do {
            System.out.print("""
                    –ö—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?
                    –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –∑–∞–±—ã–ª, —á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–∫—Ü–∏—è, –∏ —á–µ–º –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–µ—Ç—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã
                    0 - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
                    1 - –í–µ—Ä—Ö–Ω—è—è —Å–µ–∫—Ü–∏—è
                    2 - –ù–∏–∂–Ω—è—è —Å–µ–∫—Ü–∏—è
                    –û—Ç–≤–µ—Ç:\s""");
            int numb = scanner.nextInt();
            if (numb == 0) {
                Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
            } else {
                switch (numb) {
                    case 1 -> startingMethodNumbers();
                    case 2 -> endingMethodNumbers();
                    default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
                }
                isFalse = true;
                break;
            }
        } while (true);
    }

    public void startingMethodNumbers() throws NoSuchFieldException, IllegalAccessException {

        String numb = getPersonUpperSelection();
        resetVariableValue(numb);
        smartSimplificationMethod(numb);

    }

    public void endingMethodNumbers() throws NoSuchFieldException, IllegalAccessException {
        String numb = getPersonLowerSelection();
        resetVariableValue(numb);
        endLowerSimplificationMethod(numb);
    }

    private static String getPersonUpperSelection() {
        System.out.print("1 - –ï–¥–∏–Ω–∏—Ü—ã\n2 - –î–≤–æ–π–∫–∏\n3 - –¢—Ä–æ–π–∫–∏\n4 - –ß–µ—Ç–≤–µ—Ä–∫–∏\n5 - –ü—è—Ç–µ—Ä–∫–∏\n6 - –®–µ—Å—Ç–µ—Ä–∫–∏\n–û—Ç–≤–µ—Ç: ");
        String numb = scanner.nextLine();
        numb = scanner.nextLine();

        while (true) {
            if (numb.isEmpty()) {
                System.out.print("–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 6, –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É–¥–∞ —Ö–æ—á–µ—à—å –∑–∞—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏\n–û—Ç–≤–µ—Ç: ");
                numb = scanner.nextLine();
            } else if (!Character.isDigit(numb.charAt(0))) {
                System.out.print("–¢—ã –≤–≤–µ–ª –Ω–µ —Ü–∏—Ñ—Ä—É! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–û—Ç–≤–µ—Ç: ");
                numb = scanner.nextLine();
            } else {
                int viewNumber = Integer.parseInt(numb);
                if (viewNumber < 1 || viewNumber > 6) {
                    System.out.print("–í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã! –¢—ã –≤–≤–µ–ª -> " + viewNumber + ". –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç 1 –¥–æ 6\n–û—Ç–≤–µ—Ç: ");
                    numb = scanner.nextLine();
                } else if (stringArrayList.contains(numb)) {
                    System.out.print("–¢—ã —É–∂–µ —ç—Ç–æ –≤–≤–æ–¥–∏–ª, –∑–∞–±—ã–ª?. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ 6, –∫—É–¥–∞ –∂–µ–ª–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ\n–û—Ç–≤–µ—Ç: ");
                    numb = scanner.nextLine();
                } else {
                    stringArrayList.add(numb);
                    break;
                }
            }
        }
        switch (numb) {
            case "1" -> numb = "playerNumberOfUnits";
            case "2" -> numb = "playerNumberOfDeuces";
            case "3" -> numb = "playerNumberOfTriplets";
            case "4" -> numb = "playerNumberOfFours";
            case "5" -> numb = "playerNumberOfFives";
            case "6" -> numb = "playerNumberOfSixes";

            default -> System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");

        }

        return numb;
    }

    private static void resetVariableValue(String numb) throws IllegalAccessException, NoSuchFieldException {


        for (String variableName : GameSystem.variableNames) {
            if (variableName.contains(numb)) {
                GlobalVariables.class.getField(variableName).set(null, 0);
            }
        }
    }

    public static void randomChooseBot() throws NoSuchFieldException, IllegalAccessException {
        number = 0;
        allClear();
        ArrayList<Integer> integerArrayList = new ArrayList<>();

        while (hashSet.containsAll(integerArrayList)) {
            System.out.println("–ë–æ—Ç –¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫ ^_^");
            gameSystem.throwRandomCube();
            integerArrayList.clear();
            if (!arrayCubesRandoms.contains(1)) {
                if (gameSystem.arrayCubesRandom.contains(gameSystem.diceOne)) {
                    integerArrayList.add(1);
                }
            }
            if (!arrayCubesRandoms.contains(2)) {
                if (gameSystem.arrayCubesRandom.contains(gameSystem.diceTwo)) {
                    integerArrayList.add(2);
                }
            }
            if (!arrayCubesRandoms.contains(3)) {
                if (gameSystem.arrayCubesRandom.contains(gameSystem.diceThree)) {
                    integerArrayList.add(3);
                }
            }
            if (!arrayCubesRandoms.contains(4)) {
                if (gameSystem.arrayCubesRandom.contains(gameSystem.diceFour)) {
                    integerArrayList.add(4);
                }
            }
            if (!arrayCubesRandoms.contains(5)) {
                if (gameSystem.arrayCubesRandom.contains(gameSystem.diceFive)) {
                    integerArrayList.add(5);
                }
            }
            if (!arrayCubesRandoms.contains(6)) {
                if (gameSystem.arrayCubesRandom.contains(gameSystem.diceSix)) {
                    integerArrayList.add(6);
                }
            }
        }

        int index = random.nextInt(integerArrayList.size());
        number = integerArrayList.get(index);
        arrayCubesRandoms.add(number);
        hashSet.add(number);
        integerArrayList.clear();
    }


    private static void smartSimplificationMethodForBot() throws NoSuchFieldException, IllegalAccessException {

        randomChooseBot();
        System.out.println();
        int stream;
        switch (number) {
            case 1 -> {
                // –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –µ–¥–∏–Ω–∏—Ü—ã -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfUnits
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceOne::equals).count();
                GlobalVariables.botNumberOfUnits = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfUnits");
            }
            case 2 -> {
                // –µ—Å–ª–∏ –¥–≤–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¥–≤–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfDeuces
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceTwo::equals).count();
                stream = stream * gameSystem.CUBE_TWO;
                GlobalVariables.botNumberOfDeuces = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfDeuces");
            }
            case 3 -> {
                // –µ—Å–ª–∏ —Ç—Ä–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —Ç—Ä–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfTriplets
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceThree::equals).count();
                stream = stream * gameSystem.CUBE_THREE;
                GlobalVariables.botNumberOfTriplets = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfTriplets");
            }
            case 4 -> {
//                 –µ—Å–ª–∏ —á–µ—Ç–≤–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —á–µ—Ç–≤–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFours
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceFour::equals).count();
                stream = stream * gameSystem.CUBE_FOUR;
                GlobalVariables.botNumberOfFours = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfFours");
            }
            case 5 -> {
//                 –µ—Å–ª–∏ –ø—è—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ø—è—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFives
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceFive::equals).count();
                stream = stream * gameSystem.CUBE_FIVE;
                GlobalVariables.botNumberOfFives = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfFives");
            }
            case 6 -> {
//                 –µ—Å–ª–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —à–µ—Å—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfSixes
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceSix::equals).count();
                stream = stream * gameSystem.CUBE_SIX;
                GlobalVariables.botNumberOfSixes = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("botNumberOfSixes");
            }
            default -> System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");
        }
    }

    public static void smartSimplificationMethod(String numb) {

        int stream;
        switch (numb) {
            case "playerNumberOfUnits" -> {
                // –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –µ–¥–∏–Ω–∏—Ü—ã -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfUnits
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceOne::equals).count();
                GlobalVariables.playerNumberOfUnits = stream;
                GameSystem.variableNames.remove("playerNumberOfUnits");
            }
            case "playerNumberOfDeuces" -> {
                // –µ—Å–ª–∏ –¥–≤–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¥–≤–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfDeuces
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceTwo::equals).count();
                stream = stream * gameSystem.CUBE_TWO;
                GlobalVariables.playerNumberOfDeuces = stream;
                GameSystem.variableNames.remove("playerNumberOfDeuces");
            }
            case "playerNumberOfTriplets" -> {
                // –µ—Å–ª–∏ —Ç—Ä–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —Ç—Ä–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfTriplets
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceThree::equals).count();
                stream = stream * gameSystem.CUBE_THREE;
                GlobalVariables.playerNumberOfTriplets = stream;
                GameSystem.variableNames.remove("playerNumberOfTriplets");
            }
            case "playerNumberOfFours" -> {
//                 –µ—Å–ª–∏ —á–µ—Ç–≤–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —á–µ—Ç–≤–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFours
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceFour::equals).count();
                stream = stream * gameSystem.CUBE_FOUR;
                GlobalVariables.playerNumberOfFours = stream;
                GameSystem.variableNames.remove("playerNumberOfFours");
            }
            case "playerNumberOfFives" -> {
//                 –µ—Å–ª–∏ –ø—è—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ø—è—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFives
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceFive::equals).count();
                stream = stream * gameSystem.CUBE_FIVE;
                GlobalVariables.playerNumberOfFives = stream;
                GameSystem.variableNames.remove("playerNumberOfFives");
            }
            case "playerNumberOfSixes" -> {
//                 –µ—Å–ª–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —à–µ—Å—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfSixes
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceSix::equals).count();
                stream = stream * gameSystem.CUBE_SIX;
                GlobalVariables.playerNumberOfSixes = stream;
                GameSystem.variableNames.remove("playerNumberOfSixes");
            }
            default -> System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");
        }
    }

    public static void endLowerSimplificationMethod(String numb) {

        int stream;

        HashMap<String, Integer> hashMap = new HashMap<>();

        hashMap.put(gameSystem.diceOne, 1);
        hashMap.put(gameSystem.diceTwo, 2);
        hashMap.put(gameSystem.diceThree, 3);
        hashMap.put(gameSystem.diceFour, 4);
        hashMap.put(gameSystem.diceFive, 5);
        hashMap.put(gameSystem.diceSix, 6);
        int count;
        switch (numb) {

            // –µ—Å–ª–∏ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerThreeOfAKindPoints
            case "playerThreeOfAKindPoints" -> {
                if (PlayerPerson.playerCheckTripleDice(gameSystem.arrayCubesRandom)) {
                    count = hashMap.get(GlobalVariables.numberDiceForVariable);
                    GlobalVariables.playerThreeOfAKindPoints = count * 3;
                    GameSystem.variableNames.remove("playerThreeOfAKindPoints");
                } else {
                    GameSystem.variableNames.remove("playerThreeOfAKindPoints");
                    System.out.println("–≠–π, –Ω–µ —à–∞–ª–∏.");
                }
            }
            // –µ—Å–ª–∏ –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerFourOfAKindPoints
            case "playerFourOfAKindPoints" -> {
                if (PlayerPerson.playerCheckQuadrupleDice(gameSystem.arrayCubesRandom)) {
                    count = hashMap.get(GlobalVariables.numberDiceForVariable);
                    GlobalVariables.playerFourOfAKindPoints = count * 4;
                    GameSystem.variableNames.remove("playerFourOfAKindPoints");
                } else {
                    GameSystem.variableNames.remove("playerFourOfAKindPoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –§—É–ª–ª-—Ö–∞—É—Å -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º "–§—É–ª–ª-—Ö–∞—É—Å" -> —Å—É–º–º–∞ -> GlobalVariables.playerFullHousePoints
            case "playerFullHousePoints" -> {
                if (PlayerPerson.playerCheckFullHouse(gameSystem.arrayCubesRandom)) {
                    GlobalVariables.playerFullHousePoints = 25;
                    GameSystem.variableNames.remove("playerFullHousePoints");
                } else {
                    GameSystem.variableNames.remove("playerFullHousePoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerSmallStraightPoints
            case "playerSmallStraightPoints" -> {
                if (PlayerPerson.playerCheckLittleStreet(hashMap, gameSystem.arrayCubesRandom)) {
                    GlobalVariables.playerSmallStraightPoints = 30;
                    GameSystem.variableNames.remove("playerSmallStraightPoints");
                } else {
                    GameSystem.variableNames.remove("playerSmallStraightPoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerLargeStraightPoints
            case "playerLargeStraightPoints" -> {
                if (PlayerPerson.playerCheckBigStreet(hashMap, gameSystem.arrayCubesRandom)) {
                    GlobalVariables.playerLargeStraightPoints = 30;
                    GameSystem.variableNames.remove("playerLargeStraightPoints");
                } else {
                    GameSystem.variableNames.remove("playerLargeStraightPoints");
                    System.out.println("–ù–µ –ø–æ–≤–µ–∑–ª–æ. –≠—Ö.");
                }
            }
            // –µ—Å–ª–∏ –®–∞–Ω—Å -> —Å—É–º–º–∞ -> GlobalVariables.playerChancePoints
            case "playerChancePoints" -> {
                GlobalVariables.playerSummaAllNumbers = GlobalVariables.playerChancePoints;
                GameSystem.variableNames.remove("playerChancePoints");
            }
            // –µ—Å–ª–∏ Yahtzee -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º Yahtzee -> —Å—É–º–º–∞ -> GlobalVariables.playerYahtzeePoints
            case "playerYahtzeePoints" -> {
                if (PlayerPerson.playerCheckYahtzee(gameSystem.arrayCubesRandom)){
                    GlobalVariables.playerYahtzeePoints = 50;
                    GameSystem.variableNames.remove("playerCheckYahtzee");
                }
            }
            default -> System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑");
        }
    }

    public static String getPersonLowerSelection() {
        System.out.print("1 - –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n2 - –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n3 - –§—É–ª–ª-—Ö–∞—É—Å\n4 - –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç\n5 - –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç\n6 - –®–∞–Ω—Å\n7 - Yahtzee\n–û—Ç–≤–µ—Ç: ");
        String numb = scanner.nextLine();
        numb = scanner.nextLine();

        while (true) {
            if (numb.isEmpty()) {
                System.out.print("–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 7 –¥–æ 13, –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É–¥–∞ —Ö–æ—á–µ—à—å –∑–∞—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏\n–û—Ç–≤–µ—Ç: ");
                numb = scanner.nextLine();
            } else if (!Character.isDigit(numb.charAt(0))) {
                System.out.print("–¢—ã –≤–≤–µ–ª –Ω–µ —Ü–∏—Ñ—Ä—É! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–û—Ç–≤–µ—Ç: ");
                numb = scanner.nextLine();
            } else {
                int viewNumber = Integer.parseInt(numb);
                if (viewNumber < 7 || viewNumber > 13) {
                    System.out.print("–í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã! –¢—ã –≤–≤–µ–ª -> " + viewNumber + ". –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç 7 –¥–æ 13\n–û—Ç–≤–µ—Ç: ");
                    numb = scanner.nextLine();
                } else if (stringArrayList.contains(numb)) {
                    System.out.print("–¢—ã —É–∂–µ —ç—Ç–æ –≤–≤–æ–¥–∏–ª, –∑–∞–±—ã–ª?. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ 6, –∫—É–¥–∞ –∂–µ–ª–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ\n–û—Ç–≤–µ—Ç: ");
                    numb = scanner.nextLine();
                } else {
                    stringArrayList.add(numb);
                    break;
                }
            }
        }
        switch (numb) {
            case "7" -> numb = "playerThreeOfAKindPoints";
            case "8" -> numb = "playerFourOfAKindPoints";
            case "9" -> numb = "playerFullHousePoints";
            case "10" -> numb = "playerSmallStraightPoints";
            case "11" -> numb = "playerLargeStraightPoints";
            case "12" -> numb = "playerChancePoints";
            case "13" -> numb = "playerYahtzeePoints";

            default -> System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");

        }
        return numb;
    }
}
