import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.util.*;

/**
 * @author Evgeniy_Tyslevich
 * @link <a href="https://github.com/dublXq">...</a>
 */
public class Launcher {
    static final Scanner scanner = new Scanner(System.in);
    static final Launcher launcher = new Launcher();
    static final GameSystem gameSystem = new GameSystem();
    static boolean isFalseBoolean = false;
    static boolean isFalse = false;

    public static void main(String[] args) throws IOException, NoSuchFieldException, IllegalAccessException {


        int time = 3;

        System.out.println("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥—Ä—É–≥! –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ò–≥—Ä–∞ –≤ –ü–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö o(Ôø£‚ñΩÔø£)ÔΩÑ");
        while (true) {
            System.out.print("–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã. \n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∞–∂–º–∏ —Ü–∏—Ñ—Ä—É 1\n–û—Ç–≤–µ—Ç: ");
            String numb = scanner.nextLine();
            if (numb.equals("1")) {
                Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
                break;
            } else {
                System.out.println("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }

        while (true) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            gameSystem.arrayCubesRandom.clear();
            GameSystem.arrayList.clear();
            GameSystem.clearAllGlobalVariables();

            System.out.print("–ú–æ–ª–æ–¥–µ—Ü! –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω. –ù—É —á—Ç–æ, –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å?\n1 - –î–∞\n2 - –ù–µ—Ç\n–û—Ç–≤–µ—Ç: ");
            String numb_2 = scanner.nextLine();


            if (numb_2.equals("1")) {
                System.out.println("–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–±–µ–¥–µ!");
                launcher.start();
                time--;
                break;
            } else if (numb_2.equals("2")) {
                System.out.println("–£–¥–∞—á–∏! –†–∞–¥ –±—ã–ª —É–≤–∏–¥–µ—Ç—å—Å—è!(üëâÔæü„ÉÆÔæü)üëâ");
                return;
            } else {
                System.out.print("–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É = 1\n–û—Ç–≤–µ—Ç: ");
                numb_2 = scanner.nextLine();
            }
        }

        RollOrScore(time);

        System.out.println("–ù—É —á—Ç–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º. 2-–π —Ä–∞—É–Ω–¥.\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å 63 –±–∞–ª–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –≤ 35 –æ—á–∫–æ–≤ ^_^");
        gameSystem.arrayCubesRandom.clear();
        GameSystem.arrayList.clear();
        GameSystem.clearAllGlobalVariables();
        launcher.start();
        RollOrScore(time);


//        if (isFalse) {
//            gameSystem.playersBotScore();
//            gameSystem.createAndUpdateArea();
//            System.out.println("\n–ë–æ—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥! –í–∞—à —á–µ—Ä–µ–¥ ^_~");
//            isFalse = false;
//        }

    }

    private static void RollOrScore(int time) throws IOException, NoSuchFieldException, IllegalAccessException {

        while (true) {
            System.out.print("1 - –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏\n2 - –ó–∞—Å—á–∏—Ç–∞—Ç—å\n–û—Ç–≤–µ—Ç: ");
            String numb_3 = scanner.nextLine();
            if (numb_3.equals("1")) {
                gameSystem.arrayCubesRandom.clear();
                GameSystem.arrayList.clear();
                GameSystem.clearAllGlobalVariables();
                if (time == 0) {
                    System.out.println("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –±—Ä–æ—Å–æ–∫. –í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?");
                    // –ö–æ–¥ (–º–µ—Ç–æ–¥)
                    launcher.methodResultScare();
                    break;

                } else {
                    launcher.start();
                    time--;
                }

            } else if (numb_3.equals("2")) {
                // –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ (–º–µ—Ç–æ–¥)
                time = 3;
                launcher.methodResultScare();
                break;

            } else {
                System.out.println("–î–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }
    }


    public void start() {
        gameSystem.throwRandomCube();
        gameSystem.playersPersonScore();
        gameSystem.createAndUpdateArea();
    }

    public void methodResultScare() throws IOException, NoSuchFieldException, IllegalAccessException {
        // method –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
        do {
            System.out.print("""
                    –ö—É–¥–∞ –∑–∞—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏?
                    –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –∑–∞–±—ã–ª, —á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–∫—Ü–∏—è, –∏ —á–µ–º –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–µ—Ç—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã
                    0 - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
                    1 - –í–µ—Ä—Ö–Ω—è—è —Å–µ–∫—Ü–∏—è
                    2 - –ù–∏–∂–Ω—è—è —Å–µ–∫—Ü–∏—è
                    –û—Ç–≤–µ—Ç:\s""");
            int numb = scanner.nextInt();
            if (numb == 0) {
                Desktop.getDesktop().browse(URI.create("https://github.com/dublXq/dice-poker#readme"));
            } else {
                switch (numb) {
                    case 1 -> startingMethodNumbers();
                    case 2 -> getPersonLowerSelection();
                    default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
                }
                isFalse = true;
                break;
            }
        } while (true);
    }

    //–¢–†–ï–ë–£–ï–¢–°–Ø –£–°–õ–û–í–ò–ï = –ï–°–õ–ò –û–¢–í–ï–¢ –ë–´–õ –£–ñ–ï –í–´–ë–†–ê–ù (1-6), –¢–û –≠–¢–û–¢ –û–¢–í–ï–¢ –£–î–ê–õ–Ø–ï–¢–°–Ø –ò–ó –ú–ê–°–°–ò–í–ê GameSystem.variableNames
    public void startingMethodNumbers() throws NoSuchFieldException, IllegalAccessException {

        String numb = getPersonUpperSelection();
        resetVariableValue(numb);
        smartSimplificationMethod(numb);

    }

    private static void smartSimplificationMethod(String numb) {
        int stream;
        switch (numb) {
            case "playerNumberOfUnits" -> {
                // –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –µ–¥–∏–Ω–∏—Ü—ã -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfUnits
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceOne::equals).count();
                GlobalVariables.playerNumberOfUnits = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("playerNumberOfUnits");
                System.out.println(GameSystem.variableNames);
            }
            case "playerNumberOfDeuces" -> {
                // –µ—Å–ª–∏ –¥–≤–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¥–≤–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfDeuces
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceTwo::equals).count();
                stream = stream * gameSystem.CUBE_TWO;
                GlobalVariables.playerNumberOfDeuces = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("playerNumberOfDeuces");
            }
            case "playerNumberOfTriplets" -> {
                // –µ—Å–ª–∏ —Ç—Ä–æ–π–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —Ç—Ä–æ–π–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfTriplets
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceThree::equals).count();
                stream = stream * gameSystem.CUBE_THREE;
                GlobalVariables.playerNumberOfTriplets = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("playerNumberOfTriplets");
            }
            case "playerNumberOfFours" -> {
//                 –µ—Å–ª–∏ —á–µ—Ç–≤–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —á–µ—Ç–≤–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFours
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceFour::equals).count();
                stream = stream * gameSystem.CUBE_FOUR;
                GlobalVariables.playerNumberOfFours = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("playerNumberOfFours");
            }
            case "playerNumberOfFives" -> {
//                 –µ—Å–ª–∏ –ø—è—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ø—è—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfFives
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceFive::equals).count();
                stream = stream * gameSystem.CUBE_FIVE;
                GlobalVariables.playerNumberOfFives = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("playerNumberOfFives");
            }
            case "playerNumberOfSixes" -> {
//                 –µ—Å–ª–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º —à–µ—Å—Ç–µ—Ä–∫–∏ -> —Å—É–º–º–∞ -> GlobalVariables.playerNumberOfSixes
                stream = (int) gameSystem.arrayCubesRandom.stream().filter(gameSystem.diceSix::equals).count();
                stream = stream * gameSystem.CUBE_SIX;
                GlobalVariables.playerNumberOfSixes = stream;
                gameSystem.createAndUpdateArea();
                GameSystem.variableNames.remove("playerNumberOfSixes");
            }
            default -> System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");
        }
    }

    private static void resetVariableValue(String numb) throws IllegalAccessException, NoSuchFieldException {


        for (String variableName : GameSystem.variableNames) {
            if (variableName.contains(numb)) {
                GlobalVariables.class.getField(variableName).set(null, 0);
//                isFalseBoolean = true;
            }
        }
        if (isFalseBoolean) {
            System.out.println("–í—ã —É–∂–µ –≤–≤–µ–ª–∏ —ç—Ç–æ");
            isFalseBoolean = false;
        }
    }

    private static String getPersonUpperSelection() throws NoSuchFieldException, IllegalAccessException {
        System.out.print("1 - –ï–¥–∏–Ω–∏—Ü—ã\n2 - –î–≤–æ–π–∫–∏\n3 - –¢—Ä–æ–π–∫–∏\n4 - –ß–µ—Ç–≤–µ—Ä–∫–∏\n5 - –ü—è—Ç–µ—Ä–∫–∏\n6 - –®–µ—Å—Ç–µ—Ä–∫–∏\n–û—Ç–≤–µ—Ç: ");
        String numb = scanner.nextLine();
        numb = scanner.nextLine();

        switch (numb) {
            case "1" -> numb = "playerNumberOfUnits";
            case "2" -> numb = "playerNumberOfDeuces";
            case "3" -> numb = "playerNumberOfTriplets";
            case "4" -> numb = "playerNumberOfFours";
            case "5" -> numb = "playerNumberOfFives";
            case "6" -> numb = "playerNumberOfSixes";
            default -> System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑");
        }
        return numb;
    }


    public static String getPersonLowerSelection() throws NoSuchFieldException, IllegalAccessException {
        System.out.print("1 - –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n2 - –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n3 - –§—É–ª–ª-—Ö–∞—É—Å\n4 - –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç\n5 - –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç\n6 - –®–∞–Ω—Å\n7 - Yahtzee\n–û—Ç–≤–µ—Ç: ");
        String numb = scanner.nextLine();

        GameSystem.clearAllGlobalVariables();


        switch (numb) {
            case "1":
                // –µ—Å–ª–∏ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerThreeOfAKindPoints
                numb = "playerThreeOfAKindPoints";
                break;
            case "2":
                // –µ—Å–ª–∏ –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ß–µ—Ç—ã—Ä–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ -> —Å—É–º–º–∞ -> GlobalVariables.playerFourOfAKindPoints
                numb = "playerFourOfAKindPoints";
                break;
            case "3":
                // –µ—Å–ª–∏ –§—É–ª–ª-—Ö–∞—É—Å -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º "–§—É–ª–ª-—Ö–∞—É—Å" -> —Å—É–º–º–∞ -> GlobalVariables.playerFullHousePoints
                numb = "playerFullHousePoints";
                break;
            case "4":
                // –µ—Å–ª–∏ –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerSmallStraightPoints
                numb = "playerSmallStraightPoints";
                break;
            case "5":
                // –µ—Å–ª–∏ –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–∏—Ç -> —Å—É–º–º–∞ -> GlobalVariables.playerLargeStraightPoints
                numb = "playerLargeStraightPoints";
                break;
            case "6":
                // –µ—Å–ª–∏ –®–∞–Ω—Å -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º –®–∞–Ω—Å -> —Å—É–º–º–∞ -> GlobalVariables.playerChancePoints
                numb = "playerChancePoints";
                break;
            case "7":
                // –µ—Å–ª–∏ Yahtzee -> –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∫—É–±–∏–∫–æ–≤ -> –Ω–∞—Ö–æ–¥–∏–º Yahtzee -> —Å—É–º–º–∞ -> GlobalVariables.playerYahtzeePoints
                numb = "playerYahtzeePoints";
                break;
            default:
                System.out.println("–¢—ã –≤–≤–µ–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑");
        }
        return numb;
    }
}
