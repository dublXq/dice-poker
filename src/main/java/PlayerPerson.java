import java.util.*;

/**
 * @author Evgeniy_Tyslevich
 * @link <a href="https://github.com/dublXq">...</a>
 */
public class PlayerPerson {
    public static void playerCalculateBonusPoints() {
        if (GlobalVariables.playerSummaAllNumbers >= 63) {
            GlobalVariables.playerBonusPoints = 35;
            GameSystem.variableNames.remove("playerBonusPoints");
        }
    }

    public static Boolean playerCheckTripleDice(ArrayList<String> diceValues) {
        for (int i = 0; i < diceValues.size(); i++) {
            GlobalVariables.numberDiceForVariable = diceValues.get(i);
            int count = 0;
            for (int j = i + 1; j < diceValues.size(); j++) {
                if (diceValues.get(j).equals(GlobalVariables.numberDiceForVariable)) {
                    count++;
                    if (count == 2) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static Boolean playerCheckQuadrupleDice(ArrayList<String> diceValues) {
        for (int i = 0; i < diceValues.size(); i++) {
            GlobalVariables.numberDiceForVariable = diceValues.get(i);
            int count = 0;
            for (int j = i + 1; j < diceValues.size(); j++) {
                if (diceValues.get(j).equals(GlobalVariables.numberDiceForVariable)) {
                    count++;
                    if (count == 3) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static Boolean playerCheckFullHouse(ArrayList<String> diceValues) {
        boolean check = playerCheckTripleDice(diceValues);
        if (check) {
            ArrayList<String> timeVar = new ArrayList<>();
            HashMap<String, Integer> countMap = new HashMap<>();
            for (String diceValue : diceValues) {
                if (countMap.containsKey(diceValue)) {
                    countMap.put(diceValue, countMap.get(diceValue) + 1);
                    if (countMap.get(diceValue) == 3) {
                        timeVar.add(diceValue);
                        countMap.remove(diceValue);
                    }
                } else {
                    countMap.put(diceValue, 1);
                }
            }
            diceValues.removeAll(timeVar);
            for (int i = 0; i < diceValues.size(); i++) {
                GlobalVariables.numberDiceForVariable = diceValues.get(i);
                int count = 0;
                for (int j = i; j < diceValues.size(); j++) {
                    if (diceValues.get(j).equals(GlobalVariables.numberDiceForVariable)) {
                        count++;
                        if (count == 2) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public static boolean playerCheckLittleStreet(HashMap<String, Integer> hashMap, ArrayList<String> diceValues) {
        HashSet<Integer> hashSet = new HashSet<>();
        Set<Integer> values1 = Set.of(1, 2, 3, 4);
        Set<Integer> values2 = Set.of(2, 3, 4, 5);
        Set<Integer> values3 = Set.of(3, 4, 5, 6);
        for (String s : diceValues) {
            if (hashMap.containsKey(s)) {
                hashSet.add(hashMap.get(s));
            }
        }
        for (int i = 0; i < hashSet.size(); i++) {
            if (hashSet.containsAll(values1) || hashSet.containsAll(values2) || hashSet.containsAll(values3)) {
                return true;
            }
        }
        return false;
    }

    public static boolean playerCheckBigStreet(HashMap<String, Integer> hashMap, ArrayList<String> diceValues) {
        HashSet<Integer> hashSet = new HashSet<>();
        Set<Integer> values1 = Set.of(1, 2, 3, 4, 5);
        Set<Integer> values2 = Set.of(2, 3, 4, 5, 6);
        for (String s : diceValues) {
            if (hashMap.containsKey(s)) {
                hashSet.add(hashMap.get(s));
            }
        }
        for (int i = 0; i < hashSet.size(); i++) {
            if (hashSet.containsAll(values1) || hashSet.containsAll(values2)) {
                return true;
            }
        }
        return false;
    }

    public static boolean playerCheckYahtzee(ArrayList<String> diceValues) {
        for (String value : diceValues) {
            long count = diceValues.stream().filter(v -> v.equals(value)).count();
            if (count == 5) {
                return true;
            }
        }
        return false;
    }

    public static void wordBookWordsOfSupport() {
        Random random = new Random();
        ArrayList<String> wordBook = new ArrayList<>();
        wordBook.add("–ô–æ—É, –∞ —Ç—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ (üëâÔæü„ÉÆÔæü)üëâ");
        wordBook.add("–•–∞—Ö, –∏–¥–µ—à—å –∫ –ø–æ–±–µ–¥–µ? –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ —Ñ–∏–Ω–∏—à–Ω–æ–π –ø—Ä—è–º–æ–π ^_^");
        wordBook.add("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∏–ª–∏ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ù–æ–≤–æ–≥–æ –ß–µ–º–ø–∏–æ–Ω–∞ –≤ –∏–≥—Ä–µ –ü–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö o(Ôø£‚ñΩÔø£)ÔΩÑ");
        wordBook.add("–û–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥! ^_~");
        wordBook.add("–ù–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —à–µ–≤–µ–ª–∏—Ç—å —Å–≤–æ–∏–º–∏ –∏–∑–≤–∏–ª–∏–Ω–∞–º–∏ –∫–∞–∫ —Ç—ã, –ø–æ—Ö–≤–∞–ª—å–Ω–æ. –Ø –≤–∏–∂—É –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –ò–≥—Ä–æ–∫–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã ÔºàÔø£Ô∏∂Ôø£Ôºâ‚Üó„ÄÄ");
        wordBook.add("–¢—ã —É–∂–µ –±–ª–∏–∑–æ–∫! –î–∞–≤–∞–π! Ôºº(ÔæüÔΩ∞ÔæüÔºº)");
        wordBook.add("–≠—Ç–æ –∏–≥—Ä–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –¥—É–º–∞—Ç—å, –∞ –∫–∞–∫ —Ç—ã —Ö–æ—Ç–µ–ª? –ù–µ –≤—Å–µ–≥–¥–∞ —Å—Ç–æ–∏—Ç –Ω–∞–¥–µ—è—Ç—å—Å—è –Ω–∞ —É–¥–∞—á—É (‚åê‚ñ†_‚ñ†)");
        wordBook.add("–ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–±—è! ŒµŸ©(‡πë‚ùõ·¥ó‚ùõ‡πë)€∂–∑");
        wordBook.add("–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç–∞–∫ –∂–µ! Ôºº(ÔΩÄ0¬¥)Ôºè");
        wordBook.add("–≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –∏–≥—Ä–∞, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å –Ω–µ–π –Ω–∞ —É—Ä–∞! Ôºº(Ôø£‚ñΩÔø£)Ôºè");
        wordBook.add("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –ø–æ–±–µ–¥–∞! (‚úØ‚ó°‚úØ)");
        wordBook.add("–¢—ã –¥–µ—Ä–∂–∏—à—å –≤—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è! (Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß");
        wordBook.add("–ò–≥—Ä–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Ç–µ–±—è, –º–æ–≥—É—á–∞—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–∞—è!  ï‚Ä¢·¥•‚Ä¢ î");
        wordBook.add("–¢—ã —Ä–∞—Å—Ç–µ—à—å –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∏–≥—Ä–∞–µ—à—å, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! Ôºº(Ôø£‚ñΩÔø£)„Éé");
        wordBook.add("–ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç—å —Ç–µ–±—è, —Ç—ã —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à! (Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß");
        wordBook.add("–í—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, –¥–∞–≤–∞–π –≤–ø–µ—Ä–µ–¥! (‡∏á'ÃÄ-'ÃÅ)‡∏á");
        wordBook.add("–¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—à—å, –ø—É—Å—Ç—å –ø–æ–±–µ–¥–∞ –±—É–¥–µ—Ç —Ç–≤–æ–µ–π! (‚Ä¢‚Äø‚Ä¢)");
        wordBook.add("–¢—ã —è–≤–ª—è–µ—à—å—Å—è –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º, —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ! (‚úø‚óï‚Äø‚óï‚úø)");
        int randomIndex = random.nextInt(wordBook.size());
        String randomWord = wordBook.get(randomIndex);
        System.out.println(randomWord);
    }
}
